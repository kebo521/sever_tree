/*****************************内存管理******************************
//功能-------  用于定长动态申请公共内存
//作者-------  邓国祖
//创作时间--20190402
******************************************************************************/

#ifndef _RAM_MANAGEMENT_
#define _RAM_MANAGEMENT_

#ifdef __cplusplus
extern "C" {
#endif


//====================================================================
//功能:    用于初始化内存分配空间 (导入用于内存分配的空间)
//输入数据:mem_addr所申请区域的首地址,mem_size,可以使用的内存大小,particle_size 最小申请单元,取值为2^(2+n)
//输出数据:返回为0成功，其它失败
//创作时间:  	20130604
//---------------------------------------------------------------
extern int gMemAllocInit(void* mem_addr,unsigned mem_size,unsigned particle_size);

//====================================================================
//功能:    用于申请连续内存空间(实现标准 malloc)
//输入数据:silen 需要申请内存大小
//输出数据:所申请区域的首地址（使用时，不能超出申请范围），申请失败时返回为空地址,
//---------------------------------------------------------------
extern void *gfixMalloc(void);

//====================================================================
//功能:    用于释放已申请的内存(实现标准 free)
//输入数据:pfree所申请区域的首地址，为空不处理。
//---------------------------------------------------------------
extern void gfixFree(void *pfree);

//====================================================================
//功能:    用于显示内在使用睛况(主要用于调试)
//---------------------------------------------------------------
extern int gCheckAllocStatus(char *pStrout,int *pNum,int *pMaxNum,int *UseLen);

//==============提示信息结构显示========================================
typedef void (*PFUNC_SHOW_MSG)(char*,char*,int);	//pTitle,pMsg,par
/* demo
void UI_ShowMemMsg(char* pTitle,char* pMsg,int Mpar)
{
	char showErr[24];
	API_sprintf(showErr,pMsg,Mpar);
	APP_ShowMsg(pTitle,showErr,10000);
}
*/
//====================================================================
//功能:    异常信息输出功能函数
//输入数据:pFun 信息异常时，需要输出功能操作
//输出数据:无
//注:功能函数结构(pTitle,pMsg,Mpar)分别是显示标题，显示内容，结构化显示参数
//---------------------------------------------------------------
void gLoadFunAllocShowMsg(PFUNC_SHOW_MSG pFun);



#ifdef __cplusplus
}
#endif

#endif	//_RAM_MANAGEMENT_
